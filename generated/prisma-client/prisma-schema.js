module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregatePet {
  count: Int!
}

type AggregateTemp {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createPet(data: PetCreateInput!): Pet!
  updatePet(data: PetUpdateInput!, where: PetWhereUniqueInput!): Pet
  updateManyPets(data: PetUpdateManyMutationInput!, where: PetWhereInput): BatchPayload!
  upsertPet(where: PetWhereUniqueInput!, create: PetCreateInput!, update: PetUpdateInput!): Pet!
  deletePet(where: PetWhereUniqueInput!): Pet
  deleteManyPets(where: PetWhereInput): BatchPayload!
  createTemp(data: TempCreateInput!): Temp!
  updateTemp(data: TempUpdateInput!, where: TempWhereUniqueInput!): Temp
  updateManyTemps(data: TempUpdateManyMutationInput!, where: TempWhereInput): BatchPayload!
  upsertTemp(where: TempWhereUniqueInput!, create: TempCreateInput!, update: TempUpdateInput!): Temp!
  deleteTemp(where: TempWhereUniqueInput!): Temp
  deleteManyTemps(where: TempWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Pet {
  id: ID!
  user: User
  name: String!
  age: String!
  weight: String
  height: String
  species: String!
  device(where: TempWhereInput, orderBy: TempOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Temp!]
  deviceName: String!
  createAt: DateTime!
  updateAt: DateTime!
  class: String
  sex: String!
}

type PetConnection {
  pageInfo: PageInfo!
  edges: [PetEdge]!
  aggregate: AggregatePet!
}

input PetCreateInput {
  id: ID
  user: UserCreateOneWithoutPetsInput
  name: String!
  age: String!
  weight: String
  height: String
  species: String!
  device: TempCreateManyWithoutPetInput
  deviceName: String!
  class: String
  sex: String!
}

input PetCreateManyWithoutUserInput {
  create: [PetCreateWithoutUserInput!]
  connect: [PetWhereUniqueInput!]
}

input PetCreateOneWithoutDeviceInput {
  create: PetCreateWithoutDeviceInput
  connect: PetWhereUniqueInput
}

input PetCreateWithoutDeviceInput {
  id: ID
  user: UserCreateOneWithoutPetsInput
  name: String!
  age: String!
  weight: String
  height: String
  species: String!
  deviceName: String!
  class: String
  sex: String!
}

input PetCreateWithoutUserInput {
  id: ID
  name: String!
  age: String!
  weight: String
  height: String
  species: String!
  device: TempCreateManyWithoutPetInput
  deviceName: String!
  class: String
  sex: String!
}

type PetEdge {
  node: Pet!
  cursor: String!
}

enum PetOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  age_ASC
  age_DESC
  weight_ASC
  weight_DESC
  height_ASC
  height_DESC
  species_ASC
  species_DESC
  deviceName_ASC
  deviceName_DESC
  createAt_ASC
  createAt_DESC
  updateAt_ASC
  updateAt_DESC
  class_ASC
  class_DESC
  sex_ASC
  sex_DESC
}

type PetPreviousValues {
  id: ID!
  name: String!
  age: String!
  weight: String
  height: String
  species: String!
  deviceName: String!
  createAt: DateTime!
  updateAt: DateTime!
  class: String
  sex: String!
}

input PetScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  age: String
  age_not: String
  age_in: [String!]
  age_not_in: [String!]
  age_lt: String
  age_lte: String
  age_gt: String
  age_gte: String
  age_contains: String
  age_not_contains: String
  age_starts_with: String
  age_not_starts_with: String
  age_ends_with: String
  age_not_ends_with: String
  weight: String
  weight_not: String
  weight_in: [String!]
  weight_not_in: [String!]
  weight_lt: String
  weight_lte: String
  weight_gt: String
  weight_gte: String
  weight_contains: String
  weight_not_contains: String
  weight_starts_with: String
  weight_not_starts_with: String
  weight_ends_with: String
  weight_not_ends_with: String
  height: String
  height_not: String
  height_in: [String!]
  height_not_in: [String!]
  height_lt: String
  height_lte: String
  height_gt: String
  height_gte: String
  height_contains: String
  height_not_contains: String
  height_starts_with: String
  height_not_starts_with: String
  height_ends_with: String
  height_not_ends_with: String
  species: String
  species_not: String
  species_in: [String!]
  species_not_in: [String!]
  species_lt: String
  species_lte: String
  species_gt: String
  species_gte: String
  species_contains: String
  species_not_contains: String
  species_starts_with: String
  species_not_starts_with: String
  species_ends_with: String
  species_not_ends_with: String
  deviceName: String
  deviceName_not: String
  deviceName_in: [String!]
  deviceName_not_in: [String!]
  deviceName_lt: String
  deviceName_lte: String
  deviceName_gt: String
  deviceName_gte: String
  deviceName_contains: String
  deviceName_not_contains: String
  deviceName_starts_with: String
  deviceName_not_starts_with: String
  deviceName_ends_with: String
  deviceName_not_ends_with: String
  createAt: DateTime
  createAt_not: DateTime
  createAt_in: [DateTime!]
  createAt_not_in: [DateTime!]
  createAt_lt: DateTime
  createAt_lte: DateTime
  createAt_gt: DateTime
  createAt_gte: DateTime
  updateAt: DateTime
  updateAt_not: DateTime
  updateAt_in: [DateTime!]
  updateAt_not_in: [DateTime!]
  updateAt_lt: DateTime
  updateAt_lte: DateTime
  updateAt_gt: DateTime
  updateAt_gte: DateTime
  class: String
  class_not: String
  class_in: [String!]
  class_not_in: [String!]
  class_lt: String
  class_lte: String
  class_gt: String
  class_gte: String
  class_contains: String
  class_not_contains: String
  class_starts_with: String
  class_not_starts_with: String
  class_ends_with: String
  class_not_ends_with: String
  sex: String
  sex_not: String
  sex_in: [String!]
  sex_not_in: [String!]
  sex_lt: String
  sex_lte: String
  sex_gt: String
  sex_gte: String
  sex_contains: String
  sex_not_contains: String
  sex_starts_with: String
  sex_not_starts_with: String
  sex_ends_with: String
  sex_not_ends_with: String
  AND: [PetScalarWhereInput!]
  OR: [PetScalarWhereInput!]
  NOT: [PetScalarWhereInput!]
}

type PetSubscriptionPayload {
  mutation: MutationType!
  node: Pet
  updatedFields: [String!]
  previousValues: PetPreviousValues
}

input PetSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PetWhereInput
  AND: [PetSubscriptionWhereInput!]
  OR: [PetSubscriptionWhereInput!]
  NOT: [PetSubscriptionWhereInput!]
}

input PetUpdateInput {
  user: UserUpdateOneWithoutPetsInput
  name: String
  age: String
  weight: String
  height: String
  species: String
  device: TempUpdateManyWithoutPetInput
  deviceName: String
  class: String
  sex: String
}

input PetUpdateManyDataInput {
  name: String
  age: String
  weight: String
  height: String
  species: String
  deviceName: String
  class: String
  sex: String
}

input PetUpdateManyMutationInput {
  name: String
  age: String
  weight: String
  height: String
  species: String
  deviceName: String
  class: String
  sex: String
}

input PetUpdateManyWithoutUserInput {
  create: [PetCreateWithoutUserInput!]
  delete: [PetWhereUniqueInput!]
  connect: [PetWhereUniqueInput!]
  set: [PetWhereUniqueInput!]
  disconnect: [PetWhereUniqueInput!]
  update: [PetUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [PetUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [PetScalarWhereInput!]
  updateMany: [PetUpdateManyWithWhereNestedInput!]
}

input PetUpdateManyWithWhereNestedInput {
  where: PetScalarWhereInput!
  data: PetUpdateManyDataInput!
}

input PetUpdateOneRequiredWithoutDeviceInput {
  create: PetCreateWithoutDeviceInput
  update: PetUpdateWithoutDeviceDataInput
  upsert: PetUpsertWithoutDeviceInput
  connect: PetWhereUniqueInput
}

input PetUpdateWithoutDeviceDataInput {
  user: UserUpdateOneWithoutPetsInput
  name: String
  age: String
  weight: String
  height: String
  species: String
  deviceName: String
  class: String
  sex: String
}

input PetUpdateWithoutUserDataInput {
  name: String
  age: String
  weight: String
  height: String
  species: String
  device: TempUpdateManyWithoutPetInput
  deviceName: String
  class: String
  sex: String
}

input PetUpdateWithWhereUniqueWithoutUserInput {
  where: PetWhereUniqueInput!
  data: PetUpdateWithoutUserDataInput!
}

input PetUpsertWithoutDeviceInput {
  update: PetUpdateWithoutDeviceDataInput!
  create: PetCreateWithoutDeviceInput!
}

input PetUpsertWithWhereUniqueWithoutUserInput {
  where: PetWhereUniqueInput!
  update: PetUpdateWithoutUserDataInput!
  create: PetCreateWithoutUserInput!
}

input PetWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  age: String
  age_not: String
  age_in: [String!]
  age_not_in: [String!]
  age_lt: String
  age_lte: String
  age_gt: String
  age_gte: String
  age_contains: String
  age_not_contains: String
  age_starts_with: String
  age_not_starts_with: String
  age_ends_with: String
  age_not_ends_with: String
  weight: String
  weight_not: String
  weight_in: [String!]
  weight_not_in: [String!]
  weight_lt: String
  weight_lte: String
  weight_gt: String
  weight_gte: String
  weight_contains: String
  weight_not_contains: String
  weight_starts_with: String
  weight_not_starts_with: String
  weight_ends_with: String
  weight_not_ends_with: String
  height: String
  height_not: String
  height_in: [String!]
  height_not_in: [String!]
  height_lt: String
  height_lte: String
  height_gt: String
  height_gte: String
  height_contains: String
  height_not_contains: String
  height_starts_with: String
  height_not_starts_with: String
  height_ends_with: String
  height_not_ends_with: String
  species: String
  species_not: String
  species_in: [String!]
  species_not_in: [String!]
  species_lt: String
  species_lte: String
  species_gt: String
  species_gte: String
  species_contains: String
  species_not_contains: String
  species_starts_with: String
  species_not_starts_with: String
  species_ends_with: String
  species_not_ends_with: String
  device_every: TempWhereInput
  device_some: TempWhereInput
  device_none: TempWhereInput
  deviceName: String
  deviceName_not: String
  deviceName_in: [String!]
  deviceName_not_in: [String!]
  deviceName_lt: String
  deviceName_lte: String
  deviceName_gt: String
  deviceName_gte: String
  deviceName_contains: String
  deviceName_not_contains: String
  deviceName_starts_with: String
  deviceName_not_starts_with: String
  deviceName_ends_with: String
  deviceName_not_ends_with: String
  createAt: DateTime
  createAt_not: DateTime
  createAt_in: [DateTime!]
  createAt_not_in: [DateTime!]
  createAt_lt: DateTime
  createAt_lte: DateTime
  createAt_gt: DateTime
  createAt_gte: DateTime
  updateAt: DateTime
  updateAt_not: DateTime
  updateAt_in: [DateTime!]
  updateAt_not_in: [DateTime!]
  updateAt_lt: DateTime
  updateAt_lte: DateTime
  updateAt_gt: DateTime
  updateAt_gte: DateTime
  class: String
  class_not: String
  class_in: [String!]
  class_not_in: [String!]
  class_lt: String
  class_lte: String
  class_gt: String
  class_gte: String
  class_contains: String
  class_not_contains: String
  class_starts_with: String
  class_not_starts_with: String
  class_ends_with: String
  class_not_ends_with: String
  sex: String
  sex_not: String
  sex_in: [String!]
  sex_not_in: [String!]
  sex_lt: String
  sex_lte: String
  sex_gt: String
  sex_gte: String
  sex_contains: String
  sex_not_contains: String
  sex_starts_with: String
  sex_not_starts_with: String
  sex_ends_with: String
  sex_not_ends_with: String
  AND: [PetWhereInput!]
  OR: [PetWhereInput!]
  NOT: [PetWhereInput!]
}

input PetWhereUniqueInput {
  id: ID
  name: String
  age: String
  species: String
  deviceName: String
}

type Query {
  pet(where: PetWhereUniqueInput!): Pet
  pets(where: PetWhereInput, orderBy: PetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pet]!
  petsConnection(where: PetWhereInput, orderBy: PetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PetConnection!
  temp(where: TempWhereUniqueInput!): Temp
  temps(where: TempWhereInput, orderBy: TempOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Temp]!
  tempsConnection(where: TempWhereInput, orderBy: TempOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TempConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  pet(where: PetSubscriptionWhereInput): PetSubscriptionPayload
  temp(where: TempSubscriptionWhereInput): TempSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Temp {
  id: ID!
  deviceName: String!
  pet: Pet!
  Temp: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TempConnection {
  pageInfo: PageInfo!
  edges: [TempEdge]!
  aggregate: AggregateTemp!
}

input TempCreateInput {
  id: ID
  deviceName: String!
  pet: PetCreateOneWithoutDeviceInput!
  Temp: Float!
}

input TempCreateManyWithoutPetInput {
  create: [TempCreateWithoutPetInput!]
  connect: [TempWhereUniqueInput!]
}

input TempCreateWithoutPetInput {
  id: ID
  deviceName: String!
  Temp: Float!
}

type TempEdge {
  node: Temp!
  cursor: String!
}

enum TempOrderByInput {
  id_ASC
  id_DESC
  deviceName_ASC
  deviceName_DESC
  Temp_ASC
  Temp_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TempPreviousValues {
  id: ID!
  deviceName: String!
  Temp: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TempScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  deviceName: String
  deviceName_not: String
  deviceName_in: [String!]
  deviceName_not_in: [String!]
  deviceName_lt: String
  deviceName_lte: String
  deviceName_gt: String
  deviceName_gte: String
  deviceName_contains: String
  deviceName_not_contains: String
  deviceName_starts_with: String
  deviceName_not_starts_with: String
  deviceName_ends_with: String
  deviceName_not_ends_with: String
  Temp: Float
  Temp_not: Float
  Temp_in: [Float!]
  Temp_not_in: [Float!]
  Temp_lt: Float
  Temp_lte: Float
  Temp_gt: Float
  Temp_gte: Float
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TempScalarWhereInput!]
  OR: [TempScalarWhereInput!]
  NOT: [TempScalarWhereInput!]
}

type TempSubscriptionPayload {
  mutation: MutationType!
  node: Temp
  updatedFields: [String!]
  previousValues: TempPreviousValues
}

input TempSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TempWhereInput
  AND: [TempSubscriptionWhereInput!]
  OR: [TempSubscriptionWhereInput!]
  NOT: [TempSubscriptionWhereInput!]
}

input TempUpdateInput {
  deviceName: String
  pet: PetUpdateOneRequiredWithoutDeviceInput
  Temp: Float
}

input TempUpdateManyDataInput {
  deviceName: String
  Temp: Float
}

input TempUpdateManyMutationInput {
  deviceName: String
  Temp: Float
}

input TempUpdateManyWithoutPetInput {
  create: [TempCreateWithoutPetInput!]
  delete: [TempWhereUniqueInput!]
  connect: [TempWhereUniqueInput!]
  set: [TempWhereUniqueInput!]
  disconnect: [TempWhereUniqueInput!]
  update: [TempUpdateWithWhereUniqueWithoutPetInput!]
  upsert: [TempUpsertWithWhereUniqueWithoutPetInput!]
  deleteMany: [TempScalarWhereInput!]
  updateMany: [TempUpdateManyWithWhereNestedInput!]
}

input TempUpdateManyWithWhereNestedInput {
  where: TempScalarWhereInput!
  data: TempUpdateManyDataInput!
}

input TempUpdateWithoutPetDataInput {
  deviceName: String
  Temp: Float
}

input TempUpdateWithWhereUniqueWithoutPetInput {
  where: TempWhereUniqueInput!
  data: TempUpdateWithoutPetDataInput!
}

input TempUpsertWithWhereUniqueWithoutPetInput {
  where: TempWhereUniqueInput!
  update: TempUpdateWithoutPetDataInput!
  create: TempCreateWithoutPetInput!
}

input TempWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  deviceName: String
  deviceName_not: String
  deviceName_in: [String!]
  deviceName_not_in: [String!]
  deviceName_lt: String
  deviceName_lte: String
  deviceName_gt: String
  deviceName_gte: String
  deviceName_contains: String
  deviceName_not_contains: String
  deviceName_starts_with: String
  deviceName_not_starts_with: String
  deviceName_ends_with: String
  deviceName_not_ends_with: String
  pet: PetWhereInput
  Temp: Float
  Temp_not: Float
  Temp_in: [Float!]
  Temp_not_in: [Float!]
  Temp_lt: Float
  Temp_lte: Float
  Temp_gt: Float
  Temp_gte: Float
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TempWhereInput!]
  OR: [TempWhereInput!]
  NOT: [TempWhereInput!]
}

input TempWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  avatar: String
  username: String!
  password: String!
  email: String!
  name: String!
  loginSecret: String
  pets(where: PetWhereInput, orderBy: PetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pet!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  avatar: String
  username: String!
  password: String!
  email: String!
  name: String!
  loginSecret: String
  pets: PetCreateManyWithoutUserInput
}

input UserCreateOneWithoutPetsInput {
  create: UserCreateWithoutPetsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPetsInput {
  id: ID
  avatar: String
  username: String!
  password: String!
  email: String!
  name: String!
  loginSecret: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  avatar_ASC
  avatar_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  loginSecret_ASC
  loginSecret_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  avatar: String
  username: String!
  password: String!
  email: String!
  name: String!
  loginSecret: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  avatar: String
  username: String
  password: String
  email: String
  name: String
  loginSecret: String
  pets: PetUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  avatar: String
  username: String
  password: String
  email: String
  name: String
  loginSecret: String
}

input UserUpdateOneWithoutPetsInput {
  create: UserCreateWithoutPetsInput
  update: UserUpdateWithoutPetsDataInput
  upsert: UserUpsertWithoutPetsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutPetsDataInput {
  avatar: String
  username: String
  password: String
  email: String
  name: String
  loginSecret: String
}

input UserUpsertWithoutPetsInput {
  update: UserUpdateWithoutPetsDataInput!
  create: UserCreateWithoutPetsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  avatar: String
  avatar_not: String
  avatar_in: [String!]
  avatar_not_in: [String!]
  avatar_lt: String
  avatar_lte: String
  avatar_gt: String
  avatar_gte: String
  avatar_contains: String
  avatar_not_contains: String
  avatar_starts_with: String
  avatar_not_starts_with: String
  avatar_ends_with: String
  avatar_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  loginSecret: String
  loginSecret_not: String
  loginSecret_in: [String!]
  loginSecret_not_in: [String!]
  loginSecret_lt: String
  loginSecret_lte: String
  loginSecret_gt: String
  loginSecret_gte: String
  loginSecret_contains: String
  loginSecret_not_contains: String
  loginSecret_starts_with: String
  loginSecret_not_starts_with: String
  loginSecret_ends_with: String
  loginSecret_not_ends_with: String
  pets_every: PetWhereInput
  pets_some: PetWhereInput
  pets_none: PetWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
  password: String
  email: String
}
`
      }
    